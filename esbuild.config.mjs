import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const outdir = 'dist';
const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const obsimove = {
	name: 'obsimove',
	setup(build) {
	  build.onEnd(async () => {
		await fs.copyFile('manifest.json', `${outdir}/manifest.json`);
		await fs.writeFile(`${outdir}/.hotreload`, '');
  
		// Copy to dev vault if needed
		if (!prod && process.env.DEVDIR) {
		  copyNewer('{.*,**}', process.env.DEVDIR, { cwd: outdir });
		}
	  });
	}
  };

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	// plugins: [obsimove],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js"
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}